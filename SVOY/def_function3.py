"""def 3 часть"""

# Словарь в качестве аргументов (упаковка)
# Передаваемые в функцию аргументы можно упаковать в словарь при помощи оператора "**":

def big_dict(**arguments):
    print(arguments)

big_dict(key='value')
# на выходе: {'key': 'value'}

"""Возвращаемые значения (return)"""

# Функции в Python способны возвращать любой тип объекта.
# В Питоне поддерживается возврат функциями сразу несколько значений.
# Достаточно перечислить их через запятую после инструкции return.
# Возвращаемым типом будет кортеж (tuple), который можно
# распаковать в переменные.
def calculate(num1, num2):
    return num1 + num2, num1 - num2, num1 * num2

# для так называемой распаковки нескольких значений
# их следует присвоить равному количеству аргументов
res1, res2, res3 = calculate(7, 6)
print(res1, res2, res3)
# на выходе: 13 1 42
print(type(calculate(7, 6)))
# на выходе: class 'tuple'
# ☝️ Обратите внимание, что количество возвращаемых значение в кортеже
# должно совпадать с количеством переменных при распаковке.
# Иначе произойдет ошибка

"""Пустая функция
Иногда разработчики оставляют реализацию на потом, и чтобы объявленная функция 
не генерировала ошибки из-за отсутствия тела, в качестве заглушки используется 
ключевое слово pass:"""
def empty():
    pass

"""Lambda функции"""
lambda_test = lambda a, b: pow(a, b) # result = pow(base, exponent[, mod]),
# где base — это основание, exponent — показатель степени,
# а mod — необязательный параметр для вычисления остатка от деления результата на mod.
print(lambda_test(2, 4))
# на выходе: 16

'''Время выполнения функции'''
# Чтобы оценить время выполнения функции, можно поместить её вызов внутрь следующего кода:
from datetime import datetime
import time
start_time = datetime.now()

# здесь вызываем функцию

time.sleep(5)
print(datetime.now() - start_time)

