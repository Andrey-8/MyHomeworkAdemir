'''функции def'''
"""Простой пример: Вы торгуете мёдом, и после каждой продажи вам нужно печатать чек. 
В нём должно быть указано: название фирмы, дата продажи, список наименований проданных 
товаров, их количество, цены, общая сумма, а также сакраментальная фраза 
"Спасибо за покупку!"."""

def print_check(honey_positions):
    sum = 0  # переменная для накопления общей суммы
    print("ООО Медовый Гексагон\n") # оглавление чека
    # в цикле будем выводить название(name), количество(amount) и цену(price)
    for honey in honey_positions:
        name = honey[0] # первый элемент кортежа списка покупок
        amount = honey[1] # второй элемент кортежа списка покупок
        price = honey[2] # третий элемент кортежа списка покупок
        print(f"{name} ({amount} шт.) - {price} руб.") # содержание чека
        sum += amount * price  # здесь же будем считать ещё и общую сумму
    print(f"\nИтого: {sum} руб.") # вывод итоговой суммы в чеке
    print("Спасибо за покупку!")

# будем описывать состав покупки не напрямую в функции, а в отдельном СПИСКЕ КОРТЕЖЕЙ.
# Каждый кортеж состоит из трёх элементов: название товара, количество и цена.
# (название, количество, цена за штуку)
honey_positions = [
    ("Мёд липовый", 3, 1250),
    ("Мёд цветочный", 7, 1000),
    ("Мёд гречишный", 6, 1300),
    ("Донниковый мёд", 1, 1750),
    ("Малиновый мёд", 10, 2000)
]

# Теперь этот список передадим в функцию как аргумент, и самостоятельно считать
# больше не придётся.
print_check(honey_positions)


"""# объявим функцию my_function()
def my_function():
    ело функции (..какой-то код)
    Параметры и аргументы функции:
# a, b - параметры функции
def test(a, b):
    ..какой-то код

# 120, 404 — аргументы
test(120, 404)
Ключевая особенность функций — возможность возвращать значение

Для этого используется слово return
☝️ Главная фишка возвращаемых значений в том, что их можно использовать в 
дальнейшем коде: присваивать переменным, совершать с ними разные операции и 
передавать как аргументы в другие функции. НАПРИМЕР:
Решим задачу с помощью функции:
# она будет принимать два множителя, а возвращать их округленное 
# до целого числа произведение
def int_multiple(a, b):
    product = a * b
    # возвращаем значение
    return int(product)
print(int_multiple(341, 2.7))
ТЕПЕРЬ ПЕРЕДАДИМ ЗНАЧЕНИЕ ЭТОЙ ФУНКЦИЮ, В СЛЕДУЮЩУЮ ФУНКЦИЮ:
# найдём квадратный корень из возврата функции int_multiple 
# во встроенную функцию sqrt() мы передали вызов int_multiple
print(math.sqrt(int_multiple(341, 2.7)))"""
