"""магические методы, для работы с атрибутами класса (после 20 строки)"""

from token import MINUS


class Point:  # класс, это пространство имен, в котором записаны свойства класса и методы
    # они и есть атрибуты класса
    # атрибуты классов, являются общими, для всех его экземпляров (тут pt и pt2)
    MAX_COORD = 100  # свойство класса - атрибут класса
    MIN_COORD = 0  # свойство класса - атрибут класса

    # self - ссылка на экземпляр класса (тут pt и pt2)
    def __init__(self, x, y):  # метод класса - атрибут класса
        self.x = x
        self.y = y

    # self - ссылка на экземпляр класса (тут pt и pt2)
    def set_coord(self, x, y):  # метод класса - атрибут класса
        # что бы обратиться напрямую к свойствам класса, внутри метода,
        # надо использовать ссылку на класс (self)
        if self.MIN_COORD <= x <= self.MAX_COORD:
            self.x = x
            self.y = y

    # магический метод __getattribute__, можно использовать, например для запрета обращаться к
    # какому-нибудь атрибуту (например х), для этого напишем в нем условие if item == 'x':
    # self - ссылка на экземпляр класса
    def __getattribute__(self, item):  # item - атрибут, к которому идет обращение
        if item == "x":
            raise ValueError("запрещено использовать данный атрибут")
        else:
            print("__getattribute__")  # просто показать, что метод был вызван, а метод
            # автоматически вызывается, при считывании атрибута, через экземпляр класса

            return object.__getattribute__(self, item)  # что бы метод возвращал нужное
            # значение указанного в экземпляре атрибута, укажем его используя общий класс object

    """создадим метод, который будет менять атрибут класса MAX_COORD, но не только внутри метода, а у класса"""

    @classmethod  # что бы этот метод сработал, обязательно указать @classmethod
    def set_bound(cls, left):  # left - значение атрибута MAX_COORD
        cls.MAX_COORD = left  # присваиваем атрибуту MAX_COORD, значение left, используя ссылку на сам класс

    def __setattr__(self, key, value):  # этот метод автоматом вызывается каждый раз,
        # когда идет присвоение, какому-нибудь атрибуту, определенного значения
        # (key - имя атрибута,value - значение, которое присвоено атрибуту
        print("вызван метод __setattr__")

        # для чего нужен этот метод: например, можно запретить создавать какой-либо локальный атрибут
        # в экземплярах класса. Например запретим создавать атрибут 'z'
        if key == "z":
            raise AttributeError("недопустимое имя атрибута")
        else:
            object.__setattr__(self, key, value)


pt = Point(11, 22)  # экземпляр класса
pt2 = Point(1, 2)  # экземпляр класса
fgf = pt.y  # - как только обращаемся к какому-то атрибуту, через экземпляр класса, то
# срабатывает магический метод __getattribute__
pt.set_bound(50)  # вызвал метод, который меняет значение атрибута MAX_COORD (left = 50)
print(fgf)  # посмотрим, что переменная fgf, приняла значение атрибута класса
print(pt2.MAX_COORD)  # в этом экземпляре класса MAX_COORD = 100
print(pt.MAX_COORD)  # в этом экземпляре класса MAX_COORD = 50
print(Point.__dict__)
pt.z = 55
