'''способы типизации - создание условий, при которых переменные, будут иметь
какой-то обязательный тип данных'''

# можно сразу указать будущую переменную и указать (после двоеточия), желаемый тип:

trech: int  # это называется элемент аннотации типов
# аннотация типов, носит чисто информационный характер

trech = 22
trech = 'probnik'  # желтое подчеркивание - пичарм, ругается на тип и
# предлагает переименовать переменную или сменить тип данных на указанный в аннотации
print(trech, type(trech))

# аннотацию можно было сразу указать так:
tresh: int = 22
print(tresh, type(tresh))

"""чаще всего такие аннотации, встречаются при объявлении функций"""


def mul(x: int, y: int = 0):  # возьмем простую функцию, которая возвращает х * y
    return x * y  #  а что бы при вызове функции помнить, что требуются именно
    # целые значения, укажем в ней аннотацию к переменной х - (x: int)


res = mul(8, 8)
print(res)


# так же можно аннотировать возвращаемый тип (стрелочкой в конце функции)
def mul2(x: int, y: int = 0) -> float:
    return x * y


res2 = mul2(88, 88)
print(res2)

"""сделаем составную аннотацию типов, для этого вызовем модуль typing, из него импортируем
модули Union, Optional, Any, Final"""

from typing import Union, Optional, Any, Final


# Union - объединение нескольких типов в один тип, например:
def mul3(x: Union[int, float], y: Union[int, float]) -> Union[int, float]:
    return x * y


# или можно было просто создать переменную и приравнять ее к этому объекту - Union[int, float]
# тогда можно будет просто написать так:
g = Union[int, float]

def mul4(x: g, y: g) -> g:
    return x * y


# Optional - позволяет указать один тип данных и автоматически добавляет к типу, тип None
def mul5(x: float, y: Optional[str]=None): # не совсем автоматически, пришлось дописывать 'None'
    if y:
        print(f'{y} {x}')
    else:
        print(f'x = {x}')
mul5(5.55, 'ИКС') # если не прописали значение 'y' - mul5(5.55), то вывод будет по else: x = 5.55,
# потому что "y", принимает значение None

# Any - любой тип данных

# Final - для отметки констант в программе (Константа — постоянная величина),
# например, создадим константу:

MAX_VALUE: Final = 1000 # теперь если где-то в коде, мы изменим значение MAX_VALUE,
# то пичарм подсветит это и сообщит, что ее нельзя менять
